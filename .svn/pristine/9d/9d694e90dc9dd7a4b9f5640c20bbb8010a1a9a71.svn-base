package com.zccbh.demand.service.customer;

import com.zccbh.demand.controller.weChat.WeixinConstants;
import com.zccbh.demand.mapper.customer.MiddleCustomerQrcodeMapper;
import com.zccbh.demand.service.weChat.WeiXinUtils;
import com.zccbh.util.base.HttpUtils;
import net.sf.json.JSONObject;
import org.apache.http.HttpResponse;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.net.URLEncoder;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Map;

@Service
public class MiddleCustomerQrcodeService {

    @Autowired
    private MiddleCustomerQrcodeMapper middleCustomerQrcodeMapper;

    @Autowired
    private WeiXinUtils weiXinUtils;

    public String getQrcodeByCustomerId(Integer customerId) throws Exception {
        Map<String, Object> param = new HashMap<>();
        param.put("customerId", customerId);
        Map<String, Object> rs = middleCustomerQrcodeMapper.findByCustomerId(param);
        if (!CollectionUtils.isEmpty(rs)) {
            return rs.get("qrcode").toString();
        } else {
            rs = new HashMap<>();
            // 生成用户专属永久二维码
            String eventKey = String.format("%s_u_%s", customerId, 5); // 用户id_类型_活动id
            String ticket = getQrcodeFromWeXin(eventKey);
            param.put("qrcode", ticket);
            param.put("customerId", customerId);
            saveSingle(param);
            return WeixinConstants.QRCODE_URL_GET.replace("TICKET", URLEncoder.encode(ticket, "utf-8"));
        }
    }

    @Transactional(propagation = Propagation.REQUIRED)
    public void saveSingle(Map<String, Object> param) throws Exception {
        middleCustomerQrcodeMapper.saveSingle(param);
    }

    @Transactional(propagation = Propagation.REQUIRED)
    public int updateModel(Map<String, Object> param) throws Exception {
        return middleCustomerQrcodeMapper.updateModel(param);
    }

    public Map<String, Object> findSingle(Map<String, Object> param) throws Exception {
        return middleCustomerQrcodeMapper.findSingle(param);
    }

    /**
     *  生成用户专属永久二维码
     * @param eventKey
     * @return
     * @throws Exception
     */
    private String getQrcodeFromWeXin(String eventKey) throws Exception {
        String accessToken = weiXinUtils.getAccessToken();
        String url = WeixinConstants.QRCODE_URL.replace("ACCESS_TOKEN", accessToken);
//        String postBody = MessageFormat.format("{\"action_name\": \"QR_LIMIT_STR_SCENE\", \"action_info\": {\"scene\": {\"scene_str\": {0}}}}", eventKey);
        JSONObject json = new JSONObject();
        json.put("action_name","QR_LIMIT_STR_SCENE");
        JSONObject str = new JSONObject();
        str.put("scene_str",eventKey);
        JSONObject info = new JSONObject();
        info.put("scene",str);
        json.put("action_info",info);
        HttpResponse response = HttpUtils.sendPost(url, json.toString());
        String content = EntityUtils.toString(response.getEntity(), "utf-8");
        return JSONObject.fromObject(content).getString("ticket");
//        return WeixinConstants.QRCODE_URL_GET.replace("TICKET", URLEncoder.encode(ticket,"utf-8"));
    }
}
