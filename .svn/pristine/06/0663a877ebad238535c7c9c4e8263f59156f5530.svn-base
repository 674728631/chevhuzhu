<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zccbh.demand.mapper.system.ChartMapper">

    <select id="userCost" resultType="Map">
      select
        t1.amtBalance/t2.num  as userCost
      from
        (select (amtTotal-realPaid) amtBalance from cbh_foundation where id =1) t1,
		(select count(*) num from cbh_car where `status`in (13,20)) t2
    </select>

    <select id="avgRecharge" resultType="Map">
        SELECT
			t2.sum / t1.num as avgRecharge
		FROM
			( SELECT count( * ) num FROM ( SELECT count( * ) FROM cbh_car GROUP BY licensePlateNumber ) t ) t1,
			(
				SELECT
					sum( amt ) sum
				FROM
					cbh_record_recharge
				WHERE
					`status` = 1
					AND type IN (1,2)
					AND amt IN ( 9, 99 )
					AND eventType IN ( 1, 2 )
			) t2
    </select>

    <select id="avgGuaranteeNum" resultType="Map">
        SELECT
          sumDay / num as avgGuaranteeNum
		FROM
			( SELECT count( * ) num FROM ( SELECT count( * ) FROM cbh_car GROUP BY licensePlateNumber ) t ) t1,
			(
				SELECT (guaranteeNum + outNum) sumDay
				FROM
					( SELECT sum(TIMESTAMPDIFF(DAY,timeBegin,CURRENT_DATE)) guaranteeNum FROM cbh_car WHERE status = 20) t11,
					(SELECT sum(TIMESTAMPDIFF(DAY,timeBegin,timeSignout)) outNum FROM cbh_car WHERE status = 30) t22
			) t2
    </select>

    <select id="avgEventAmt" resultType="Map">
        SELECT
			totalAssert / totalCar as avgEventAmt
		FROM
			( SELECT count( * ) totalCar FROM ( SELECT count( * ) FROM cbh_car GROUP BY licensePlateNumber ) t ) t1,
			(
				SELECT
					sum( b.amtAssert ) totalAssert
				FROM
					cbh_event a,
					cbh_event_assert b
				WHERE
					a.eventNo = b.eventNo
					AND a.statusEvent > 31
					AND a.isInvalid = 1
			) t2
    </select>

    <select id="toPay" resultType="Map">
        SELECT
            toPay / totalCar as toPayPer,toPay
        FROM
            ( SELECT count( * ) toPay FROM ( SELECT count( licensePlateNumber ) FROM cbh_car WHERE `status` = 1 GROUP BY licensePlateNumber ) t ) t1,
            ( SELECT count( * ) totalCar FROM ( SELECT count( * ) FROM cbh_car GROUP BY licensePlateNumber ) t ) t2
    </select>

    <select id="noBanlance" resultType="Map">
        SELECT
            noBanlance / guaranteeNum as noBanlancePer, noBanlance
        FROM
        ( SELECT count( * ) noBanlance FROM cbh_car WHERE `status` = 20 AND <![CDATA[  amtCooperation < 1 ]]> ) t1,
        ( SELECT count( * ) guaranteeNum FROM cbh_car WHERE `status` = 20 ) t2
    </select>

    <select id="eventNum" resultType="Map">
        SELECT count( * ) as eventNum FROM cbh_event WHERE statusEvent > 2 AND isInvalid = 1
    </select>

    <select id="eventNumByMonth" resultType="String">
--      	SELECT
--             count( * ) eventNum,
--             DATE_FORMAT( timePay, '%Y年%m月' ) month
--         FROM
--             cbh_event
--         WHERE
--             statusEvent >= 31
--             AND isInvalid = 1
--         GROUP BY
--             month
--         ORDER BY
--             month;
        SELECT getEventNumByMonth() AS eventNum
    </select>

    <select id="getGuaranteeNumByMonth" resultType="Map">
        SELECT getGuaranteeNumByMonth ( ) AS guaranteeNum
    </select>

    <select id="eventAmt" resultType="Map">
        SELECT
            amtAssert AS name,
            count( * ) AS value
        FROM
            (
            SELECT
                CASE
                WHEN <![CDATA[ amtAssert < 300 ]]> THEN '1-300以下'
                WHEN amtAssert BETWEEN 300 AND 499 THEN '2-300-500'
                WHEN amtAssert BETWEEN 500 AND 799 THEN '3-500-800'
                WHEN amtAssert BETWEEN 800 AND 999 THEN '4-800-1000'
                WHEN amtAssert >= 1000 THEN '5-1000以上'
                END AS 'amtAssert'
            FROM
                cbh_event a,
                cbh_event_assert b
            WHERE
                a.eventNo = b.eventNo
                AND statusEvent > 21
                AND isInvalid = 1
            ) t
        GROUP BY
          amtAssert
        ORDER BY
          amtAssert
    </select>

    <select id="rechargeNum" resultType="Map">
        SELECT
            CONCAT(amt,'元') AS name,
            count( amt ) AS value
        FROM
            cbh_record_recharge
        WHERE
            eventType IN ( 1, 2 )
            AND `status` = 1
            AND amt IN ( 1.2, 3, 9, 99 )
            AND type >2
        GROUP BY
            amt
        ORDER BY
            amt
    </select>

    <select id="getDamagePosition" resultType="String">
        SELECT getDamagePosition()
    </select>
</mapper>